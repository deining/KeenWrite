plugins {
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'com.palantir.git-version' version '0.15.0'
}

repositories {
  mavenCentral()

  maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
  maven { url 'https://nexus.bedatadriven.com/content/groups/public' }

  maven {
    url "https://css4j.github.io/maven/"
    mavenContent {
      releasesOnly()
    }
    content {
      includeGroup 'com.github.css4j'
      includeGroup 'io.sf.carte'
      includeGroup 'io.sf.jclf'
    }
  }
}

// Assume a cross-platform Ã¼berjar unless targetOs is set.
String[] os = ['win', 'mac', 'linux']

if (project.hasProperty( 'targetOs' )) {
  if ('windows' == targetOs) {
    os = ["win"]
  } else {
    os = [targetOs]
  }
}

def moduleSecurity = [
    '--add-opens=javafx.controls/javafx.scene.control=ALL-UNNAMED',
    '--add-opens=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED',
    '--add-opens=javafx.graphics/javafx.scene.text=ALL-UNNAMED',
    '--add-opens=javafx.graphics/com.sun.javafx.css=ALL-UNNAMED',
    '--add-opens=javafx.graphics/com.sun.javafx.text=ALL-UNNAMED',
    '--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED',
    '--add-exports=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
    '--add-exports=javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED',
    '--add-exports=javafx.graphics/com.sun.javafx.text=ALL-UNNAMED',
    '--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
    '--add-exports=javafx.graphics/com.sun.javafx.scene.text=ALL-UNNAMED',
    '--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED',
]

javafx {
  version = '18'
  modules = ['javafx.controls', 'javafx.swing']
  configuration = 'compileOnly'
}

dependencies {
  def v_junit = '5.9.0'
  def v_flexmark = '0.64.0'
  def v_jackson = '2.13.4'
  def v_echosvg = '0.2.1'

  // JavaFX
  implementation 'org.controlsfx:controlsfx:11.1.1'
  implementation 'org.fxmisc.richtext:richtextfx:0.10.9'
  implementation 'org.fxmisc.flowless:flowless:0.6.10'
  implementation 'org.fxmisc.wellbehaved:wellbehavedfx:0.3.3'
  implementation 'com.miglayout:miglayout-javafx:11.0'
  implementation 'com.dlsc.preferencesfx:preferencesfx-core:11.10.0'

  // Markdown
  implementation "com.vladsch.flexmark:flexmark:${v_flexmark}"
  implementation "com.vladsch.flexmark:flexmark-ext-definition:${v_flexmark}"
  implementation "com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:${v_flexmark}"
  implementation "com.vladsch.flexmark:flexmark-ext-superscript:${v_flexmark}"
  implementation "com.vladsch.flexmark:flexmark-ext-tables:${v_flexmark}"
  implementation "com.vladsch.flexmark:flexmark-ext-typographic:${v_flexmark}"

  // YAML
  implementation "com.fasterxml.jackson.core:jackson-core:${v_jackson}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${v_jackson}"
  implementation "com.fasterxml.jackson.core:jackson-annotations:${v_jackson}"
  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${v_jackson}"
  implementation 'org.yaml:snakeyaml:1.33'

  // HTML parsing and rendering
  implementation 'org.jsoup:jsoup:1.15.3'
  // TODO: https://github.com/flyingsaucerproject/flyingsaucer/pull/170
  //implementation 'org.xhtmlrenderer:flying-saucer-core:9.1.22'

  // R
  implementation 'org.renjin:renjin-script-engine:3.5-beta76'
  implementation 'org.renjin.cran:rjson:0.2.15-renjin-21'

  // SVG
  implementation "io.sf.carte:echosvg-awt-util:${v_echosvg}"
  implementation "io.sf.carte:echosvg-bridge:${v_echosvg}"
  implementation "io.sf.carte:echosvg-css:${v_echosvg}"
  implementation "io.sf.carte:echosvg-dom:${v_echosvg}"
  implementation "io.sf.carte:echosvg-ext:${v_echosvg}"
  implementation "io.sf.carte:echosvg-gvt:${v_echosvg}"
  implementation "io.sf.carte:echosvg-parser:${v_echosvg}"
  implementation "io.sf.carte:echosvg-script:${v_echosvg}"
  implementation "io.sf.carte:echosvg-svg-dom:${v_echosvg}"
  implementation "io.sf.carte:echosvg-svggen:${v_echosvg}"
  implementation "io.sf.carte:echosvg-transcoder:${v_echosvg}"
  implementation "io.sf.carte:echosvg-util:${v_echosvg}"
  implementation "io.sf.carte:echosvg-xml:${v_echosvg}"

  // Misc.
  implementation 'org.ahocorasick:ahocorasick:0.6.3'
  implementation 'org.apache.commons:commons-configuration2:2.8.0'
  implementation 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3'
  implementation 'javax.validation:validation-api:2.0.1.Final'
  implementation 'org.greenrobot:eventbus-java:3.3.1'
  implementation 'commons-beanutils:commons-beanutils:1.9.4'

  // Command-line parsing
  implementation 'info.picocli:picocli:4.6.3'

  // Spelling, TeX, Docking, KeenQuotes
  implementation fileTree( include: ['**/*.jar'], dir: 'libs' )

  def fx = ['controls', 'graphics', 'fxml', 'swing']

  fx.each { fxitem ->
    os.each { ositem ->
      runtimeOnly "org.openjfx:javafx-${fxitem}:${javafx.version}:${ositem}"
    }
  }

  testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
  testImplementation "org.junit.jupiter:junit-jupiter-api:${v_junit}"
  testImplementation "org.junit.jupiter:junit-jupiter-params:${v_junit}"
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

compileJava {
  options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

def resourceDir = sourceSets.main.resources.srcDirs[0]

final Properties config = new Properties()
final File configFile = file( "${resourceDir}/bootstrap.properties" )
final FileInputStream configStream = new FileInputStream( configFile )
config.load( configStream )
configStream.close()

final String applicationName = config.get( 'application.title' ).toString().toLowerCase()
final String applicationClass = "com.${applicationName}.Launcher"

application {
  mainClass.set( applicationClass )
  applicationDefaultJvmArgs = moduleSecurity
}

version = gitVersion()

final File p = new File( "${resourceDir}/com/${applicationName}/app.properties" )
p.write( "application.version=${version}" )

jar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE

  doFirst {
    manifest {
      attributes 'Main-Class': applicationClass
    }
  }

  from {
    (configurations.runtimeClasspath.findAll { !it.path.endsWith( ".pom" ) })
        .collect { it.isDirectory() ? it : zipTree( it ) }
  }

  archiveFileName = "${applicationName}.jar"

  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

distributions {
  main {
    distributionBaseName = applicationName
    contents {
      from { ['LICENSE.md', 'README.md'] }
      into( 'images' ) {
        from { 'images' }
      }
    }
  }
}

test {
  useJUnitPlatform()

  doFirst { jvmArgs = moduleSecurity }
  testLogging { exceptionFormat = 'full' }
}
